// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TaxCalculator.Infrastructure.Data;

#nullable disable

namespace TaxCalculator.Infrastructure.Migrations
{
    [DbContext(typeof(TaxCalculatorDbContext))]
    partial class TaxCalculatorDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TaxCalculator.Domain.Models.TaxBand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("LowerLimit")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("TaxRate")
                        .HasColumnType("int");

                    b.Property<decimal?>("UpperLimit")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("LowerLimit");

                    b.ToTable("TaxBands", null, t =>
                        {
                            t.HasCheckConstraint("CK_TaxBand_Limits", "[LowerLimit] >= 0 AND ([UpperLimit] IS NULL OR [UpperLimit] > [LowerLimit])");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            LowerLimit = 0m,
                            Name = "Tax Band A",
                            TaxRate = 0,
                            UpperLimit = 5000m
                        },
                        new
                        {
                            Id = 2,
                            LowerLimit = 5000m,
                            Name = "Tax Band B",
                            TaxRate = 20,
                            UpperLimit = 20000m
                        },
                        new
                        {
                            Id = 3,
                            LowerLimit = 20000m,
                            Name = "Tax Band C",
                            TaxRate = 40
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
